<!DOCTYPE html>

<html>
    <head>
    
        <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
        <meta charset="utf-8">
        <title>Map MCMM</title>
        <style>

            html, body {
                height: 100%;
                font-size: 18px;
                margin: 0;
                padding: 0;
            }

            #right-panel {
                font-family: 'Roboto','sans-serif';
                line-height: 25px;
                padding-left: 10px;
                padding-top: 15px;
                margin: 20px;
                margin-top: 0px;
                border-width: 2px;
                width: 28%;
                height: 400px;
                float: left;
                text-align: left; 
            }

            #map {
                float: left;
                width: 67%;
                height: 100%;
            }

            #waypoints {
                height: 300px;
                margin-bottom: 5px;
                font-size: 15px;
                width: 100%;
                overflow: scroll; 
            }

            #right-panel option {
                width: 140%;
                height: 20px;
                padding: 5px; 
            }

            #heading {
                font-size: 19px;
                margin-bottom: 0px;
            }

            p {
                font-size: 15px;
                margin: 1;
                padding: 1;
            }

            a {
                font-size: 15px;
            }

            button {
                border: 1px solid #999999;
                background-color: #cccccc3d;
                color: #000000;
                border-radius: 5px;
            }

            button:disabled,
            button[disabled] {
                border: 1px solid #999999;
                background-color: #cccccc;
                color: #000000;
            }

            #right-panel p { 
                margin: 0;
                padding: 0;
            }

            #right-panel i {
                font-size: 15px;
                margin: 0;
                padding: 0;
            }

        </style>
    </head>
    <body>
        
        <div id="map"></div>
        <div id="right-panel">
        
            <div id="scrollDiv">
                <div id="heading"><b>Structure Types</b></div>
                <input type="checkbox" checked onclick="javascript: createOptions()" name="typeBox" value="public"> Public <br>
                <input type="checkbox" checked onclick="javascript: createOptions()" name="typeBox" value="religious"> Religious <br>
                <input type="checkbox" checked onclick="javascript: createOptions()" name="typeBox" value="educational"> Educational <br>
                <input type="checkbox" checked onclick="javascript: createOptions()" name="typeBox" value="commercial"> Commercial/Industrial <br>
                <input type="checkbox" checked onclick="javascript: createOptions()" name="typeBox" value="residential"> Residential <br>
                <br>
                
                <div id="heading"><b>Route Options</b></div>
                <i>Select up to 24 locations</i> <br>
                <i>Shift+Click for multiple selection</i> <br>
                <i>Ctrl+Click or Cmd+Click for single selection</i> <br>
                <button id="rbutton" onClick="javascript: routeClicked() & createOptions()">Sort by<br/>efficient routes</button>
                <button id="ybutton" onClick="javascript: yearClicked() & createOptions()">Sort by<br/>year built</button>
                <button id="abutton" onClick="javascript: archClicked() & createOptions()">Sort by<br/>architect</button>
                <button id="tbutton" onClick="javascript: typeClicked() & createOptions()">Sort by<br/>structure type</button>
                
                <div id="selectBox">
                    <select multiple id="waypoints">
                    </select> 
                </div>

                <input type="submit" id="submit" value="Create Route" style="border: 1px solid #999999; background: rgb(253, 252, 255); border-radius: 5px; font-size: 14px; height: 26px; width:115px; margin-top:5px; margin-bottom:15px;">

                <br><br>
                <div id="heading"><b>Open route in Google Maps</b></div>

                <form action="javascript: openMaps()">
                    <input type="submit" href="" id="openMaps" disabled="disabled" value="Click to Open" style="border: 1px solid #999999; background: rgb(253, 252, 255); border-radius: 5px; font-size: 14px; height: 26px; width:118px; margin-top:5px;"> <br>
                </form>
                <br>

            </div>

        </div>



        <script>
            document.getElementById("rbutton").disabled = true;
            var select = document.getElementById('waypoints');

            detectBrowser()

            Object.entries(myArray).forEach(
            ([key, value]) => { 
                var opt = document.createElement('option');
                opt.value = value.property_address + ", Midland, MI";


                if (value.building_type != "") {
                    if (value.year_built == "" && value.architect != "") {
                        opt.innerHTML =  value.property_address + " | " + value.architect + " | " + value.building_type;
                    }
                    if (value.year_built != "" && value.architect == "") {
                        opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.building_type;
                    }
                    if (value.year_built != "" && value.architect != "") {
                        opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect + " | " + value.building_type;
                    }
                    if (value.year_built == "" && value.architect == "") {
                        opt.innerHTML =  value.property_address + " | " + value.building_type;
                    }   
                }

                else if (value.building_type == "") {
                    if (value.year_built == "" && value.architect != "") {
                        opt.innerHTML =  value.property_address + " | " + value.architect;
                    }
                    if (value.year_built != "" && value.architect == "") {
                        opt.innerHTML =  value.property_address + " | " + value.year_built;
                    }
                    if (value.year_built != "" && value.architect != "") {
                        opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect;
                    }
                    if (value.year_built == "" && value.architect == "") {
                        opt.innerHTML =  value.property_address;
                    }   
                }

                if (value.property_address == "2927 Manor Dr" || value.property_address == "2923 Manor Dr") {
                    opt.innerHTML =  value.property_address + " | " + value.architect + " | " + "Comm/Ind";
                }
                
                if (value.property_address == "4300 Sherwood Ct") {
                    opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect + " | " + "Res";
                }

                select.appendChild(opt);  
            });


            function openMaps() {
                var link = document.getElementById("openMaps").href;
                console.log(link);
                window.open(link);
            }

            function routeClicked() {
                document.getElementById("rbutton").disabled = true;
                document.getElementById("ybutton").disabled = false;
                document.getElementById("abutton").disabled = false;
                document.getElementById("tbutton").disabled = false;
            }

            function yearClicked() {
                document.getElementById("rbutton").disabled = false;
                document.getElementById("ybutton").disabled = true;
                document.getElementById("abutton").disabled = false;
                document.getElementById("tbutton").disabled = false;
            }

            function archClicked() {
                document.getElementById("rbutton").disabled = false;
                document.getElementById("ybutton").disabled = false;
                document.getElementById("abutton").disabled = true;
                document.getElementById("tbutton").disabled = false;
            }

            function typeClicked() {
                document.getElementById("rbutton").disabled = false;
                document.getElementById("ybutton").disabled = false;
                document.getElementById("abutton").disabled = false;
                document.getElementById("tbutton").disabled = true;
            }

            

            function initMap() {
                var markerArray = [];
                var polyArray = [];
                var stepDisplay = new google.maps.InfoWindow;
                var directionsService = new google.maps.DirectionsService;
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 12,
                    center: {lat: 43.618183, lng: -84.234238}
                });
                var directionsDisplay = new google.maps.DirectionsRenderer({map: map, suppressInfoWindows: true, suppressMarkers: true, suppressPolylines: true});

                directionsDisplay.setMap(map);

                document.getElementById('submit').addEventListener('click', function() {
                    calculateAndDisplayRoute(directionsService, directionsDisplay, polyArray, markerArray, stepDisplay, map);
                });
            }

            function calculateAndDisplayRoute(directionsService, directionsDisplay, polyArray, markerArray, stepDisplay, map) {
                var selected = [];
                var waypts = [];
                var checkboxArray = document.getElementById('waypoints');
                
                for (var i = 0; i < polyArray.length; i++) {
                    polyArray[i].setMap(null);
                }

                for (var i = 0; i < markerArray.length; i++) {
                    markerArray[i].setMap(null);
                }

                for (var i = 0; i < checkboxArray.length; i++) {
                    if (checkboxArray.options[i].selected) {
                        selected.push({
                        location: checkboxArray[i].value,
                        stopover: true
                        });
                    }
                }

                if (selected.length == 0) {
                    alert("No locations selected");
                    return;
                }

                var start = selected[0].location;
                var end;
                var endSelect = selected[selected.length - 1].location;
                var nStart;
                var nEnd;

                Object.entries(myArray).forEach(
                ([key, value]) => { 
                    if (value.property_address + ", Midland, MI" == selected[0].location) {
                        nStart = value.neighborhood;
                    }
                    if (value.property_address + ", Midland, MI" == selected[selected.length - 1].location) {
                        nEnd = value.neighborhood;
                    }
                });

                if (document.getElementById("rbutton").disabled == true) {
                    if (nStart == nEnd) {
                        end = start;
                    }
                    else if (nStart != nEnd) {
                        end = endSelect;
                    }
                }
                else if (document.getElementById("rbutton").disabled == false) {
                    end = start;
                }
                


                for (var i = 1; i < selected.length; i++) {
                    waypts.push(selected[i]);
                }
                

                directionsService.route({
                    origin: start,
                    destination: end,
                    waypoints: waypts,
                    optimizeWaypoints: true,
                    travelMode: 'DRIVING'
                }, function(response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                    renderDirectionsPolylines(response, polyArray, map);
                    showSteps(response, markerArray, stepDisplay, map);

                    var route = response.routes[0];                 
                    var link = "https://www.google.com/maps/dir/";
                    
                    for (var i = 0; i < route.legs.length; i++) {
                        link += route.legs[i].start_address;
                    }

                    var edit1 = link.replace(/, USA/g, "/");
                    var edit2 = edit1.replace(/, /g, "+");
                    var edit3 = edit2.replace(/\s/g, "+");
                         
                    document.getElementById("openMaps").removeAttribute("disabled");
                    document.getElementById("openMaps").href = edit3;
                } else {
                    window.alert('Unable to calculate route due to ' + status);
                }
                });
            }

            function renderDirectionsPolylines(response, polyArray, map) {
                var polyRoute = response.routes[0].legs;
                for (var i = 0; i < polyRoute.length - 1; i++) {
                    var nextStep = polyRoute[i].steps;
                    for (j = 0; j < nextStep.length; j++) {
                        var nextSegment = nextStep[j].path;
                        var stepPolyline = new google.maps.Polyline({strokeColor: '#0088FF', strokeWeight: 6, strokeOpacity: 0.6});
                        for (k = 0; k < nextSegment.length; k++) {
                            stepPolyline.getPath().push(nextSegment[k]);
                        }
                        polyArray.push(stepPolyline);
                        stepPolyline.setMap(map);
                    }
                }
            }

            function showSteps(response, markerArray, stepDisplay, map) {
                var markerRoute = response.routes[0];

                for (var i = 0; i < markerRoute.legs.length; i++) {
                    var marker = markerArray[i] = markerArray[i] || new google.maps.Marker({label: ""+(i+1), zIndex: 1000 + i});
                    marker.setMap(map);
                    marker.setPosition(markerRoute.legs[i].start_location);
                    
                    var editAddress1 = markerRoute.legs[i].start_address.replace(/, Midland, MI \d{5}/, "");
                    var editAddress2 = editAddress1.replace(/, USA/g, "");
                    var info;

                    if ( stepDisplay != null ) {
                        stepDisplay.close();
                    }

                    if (editAddress2 == "Midland County Administration Building, 220 W Ellsworth St") {
                        info = "<p><b>220 W Ellsworth St</b> - Midland County Administration Building</p>" +
                        "<a href=https://firebasestorage.googleapis.com/v0/b/mcmm-database.appspot.com/o/220%20W%20Ellsworth%20St.jpg?alt=media&token=41c754a0-9ad2-40c3-835b-c998e59ba058 target=_blank>Open image in new window</a><br><p>Public</p>";
                    }

                    Object.entries(myArray).forEach(
                    ([key, value]) => { 
                        if (value.property_address == editAddress2) {
                            if (value.property_name == "") {
                                info = "<p><b>" + value.property_address + "</b></p>";
                                if (value.image_link != "") {
                                    info += "<a href=" + value.image_link + " target=_blank>Open image in new window</a><br>";
                                }
                            }
                            else if (value.property_name != "") {
                                info = "<p><b>" + value.property_address + "</b> - " + value.property_name + "</p>";
                                if (value.image_link != "") {
                                    info += "<a href=" + value.image_link + " target=_blank>Open image in new window</a><br>";
                                }
                            }
                            
                            if (value.building_type != "") {
                                if (value.year_built == "" && value.architect != "") {
                                    info += "<p>" + value.architect + " | " + value.building_type + "</p>";
                                }
                                if (value.year_built != "" && value.architect == "") {
                                    info += "<p>" + value.year_built + " | " + value.building_type + "</p>";
                                }
                                if (value.year_built != "" && value.architect != "") {
                                    info += "<p>" + value.year_built + " | " + value.architect + " | " + value.building_type + "</p>";
                                }
                                if (value.year_built == "" && value.architect == "") {
                                    info += "<p>" + value.building_type + "</p>";
                                }   
                            }

                            else if (value.building_type == "") {
                                if (value.year_built == "" && value.architect != "") {
                                    info += "<p>" + value.architect + "</p>";
                                }
                                if (value.year_built != "" && value.architect == "") {
                                    info += "<p>" + value.year_built + "</p>";
                                }
                                if (value.year_built != "" && value.architect != "") {
                                    info += "<p>" + value.year_built + " | " + value.architect + "</p>";
                                }   
                            }
                        }
                    });

                    if (typeof info === 'undefined') {
                        info = "<b>" + editAddress2 + "</b>";
                    }
                    
                    attachText(stepDisplay, marker, info, map);
                }

                var markerBounds = new google.maps.LatLngBounds();

                for (var j = 0; j < marker.length; j++) {
                    markerBounds.extend(marker[j].getPosition());
                }

                map.fitBounds(markerBounds);
            }

            function attachText(stepDisplay, marker, text, map) {
                google.maps.event.addListener(marker, 'click', function() {
                    stepDisplay.setContent(text);
                    stepDisplay.open(map, marker);
                });
            }
            

            function createOptions() {
                var orderedList = orderList();

                var select = document.getElementById('waypoints');
                Object.entries(orderedList).forEach(
                ([key, value]) => { 
                    var opt = document.createElement('option');         
                    opt.value = value.property_address + ", Midland, MI";
                    

                    if (value.building_type != "") {
                        if (value.year_built == "" && value.architect != "") {
                            opt.innerHTML =  value.property_address + " | " + value.architect + " | " + value.building_type;
                        }
                        if (value.year_built != "" && value.architect == "") {
                            opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.building_type;
                        }
                        if (value.year_built != "" && value.architect != "") {
                            opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect + " | " + value.building_type;
                        }
                        if (value.year_built == "" && value.architect == "") {
                            opt.innerHTML =  value.property_address + " | " + value.building_type;
                        }   
                    }

                    else if (value.building_type == "") {
                        if (value.year_built == "" && value.architect != "") {
                            opt.innerHTML =  value.property_address + " | " + value.architect;
                        }
                        if (value.year_built != "" && value.architect == "") {
                            opt.innerHTML =  value.property_address + " | " + value.year_built;
                        }
                        if (value.year_built != "" && value.architect != "") {
                            opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect;
                        }
                        if (value.year_built == "" && value.architect == "") {
                            opt.innerHTML =  value.property_address;
                        }   
                    }

                    if (value.property_address == "2927 Manor Dr" || value.property_address == "2923 Manor Dr") {
                        opt.innerHTML =  value.property_address + " | " + value.architect + " | " + "Comm/Ind";
                    }
                    
                    if (value.property_address == "4300 Sherwood Ct") {
                        opt.innerHTML =  value.property_address + " | " + value.year_built + " | " + value.architect + " | " + "Res";
                    }


                    select.appendChild(opt);  
                });
            }


            function orderList() {
                var filtered1 = narrowByType();
                var order1 = [];
                var order2 = [];
                var order3 = [];
                var type;
                var pub = 0;
                var arch = ["Dow", "Warner", "Hallett", "Beach", "Schwartz", "Schulwitz", "Schwartz/Blacklock", "Schwartz/Beach", 
                    "Hallett/Saro", "Goodall", "Allison", "Goodall/Beach", "Schulwitz/Virgo", "Nurmi", "Cummings", "Wesolek", 
                    "Goddeyne", "Robertson", "Perry/Feagley", "Hammerschmidt", "Spence", "Stone", "Dilloway", "Ebach", "Boone", "Upton", 
                    "Tilton", "Schwitzer", "McColl", "Freudinger", "Sweebe", "Matern", "Tobocman/Lawrence"];
                var char = ["6", "5", "4", "3", "2", "1", "0"];
                var num = ["6", "3", "2", "5", "4", "1", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16"];

                for (i=0; i<filtered1.length; i++) {
                    if (filtered1[i].building_type == "Public") { 
                        pub = pub + 1; 
                    }
                }

                if (pub != 0) {
                    type = ["Public", "Public and Comm/Ind", "Public and Edu", "Religious", "Religious and Edu", "Educational", "Commercial/Industrial", "Edu and Comm/Ind", "Comm/Ind and Residential", "Residential", ""];
                }

                else {
                    type = ["Religious", "Religious and Edu", "Educational", "Public and Edu", "Commercial/Industrial", "Edu and Comm/Ind", "Public and Comm/Ind", "Comm/Ind and Residential", "Residential", ""];
                }
                
                if (document.getElementById("rbutton").disabled == true) {
                    for (var i=0; i<char.length; i++) {                     
                        Object.entries(filtered1).forEach(
                        ([key, value]) => {      
                            if (value.characteristics_sum == char[i]) {
                                order1.push(value);                            
                            }
                        });                                              
                    } 
                    
                    for (var i=0; i<type.length; i++) {                     
                        Object.entries(order1).forEach(
                        ([key, value]) => {      
                            if (value.building_type == type[i]) {
                                order2.push(value);                            
                            }
                        });                                              
                    }

                    for (var i=0; i<num.length; i++) {                     
                        Object.entries(order2).forEach(
                        ([key, value]) => {      
                            if (value.neighborhood == num[i]) {
                                order3.push(value);                            
                            }
                        });                                              
                    }

                    return order3;
                }

                else if (document.getElementById("ybutton").disabled == true) {
                    for (var i=1920; i<2000; i++) {                     
                        Object.entries(filtered1).forEach(
                        ([key, value]) => {      
                            if (value.year_built == i) {
                                order1.push(value);                            
                            }
                        });                                              
                    }

                    Object.entries(filtered1).forEach(
                    ([key, value]) => {      
                        if (value.year_built == "") {
                            order1.push(value);                            
                        }
                    });

                    return order1;
                }

                else if (document.getElementById("abutton").disabled == true) {
                    for (var i=0; i<char.length; i++) {                     
                        Object.entries(filtered1).forEach(
                        ([key, value]) => {      
                            if (value.characteristics_sum == char[i]) {
                                order1.push(value);                            
                            }
                        });                                              
                    } 
                    
                    for (var i=0; i<type.length; i++) {                     
                        Object.entries(order1).forEach(
                        ([key, value]) => {      
                            if (value.building_type == type[i]) {
                                order2.push(value);                            
                            }
                        });                                              
                    }

                    for (var i=0; i<arch.length; i++) {                     
                        Object.entries(order2).forEach(
                        ([key, value]) => {      
                            if (value.architect == arch[i]) {
                                order3.push(value);                            
                            }
                        });                                              
                    }

                    return order3;
                }

                else if (document.getElementById("tbutton").disabled == true) {
                    for (var i=0; i<char.length; i++) {                     
                        Object.entries(filtered1).forEach(
                        ([key, value]) => {      
                            if (value.characteristics_sum == char[i]) {
                                order1.push(value);                            
                            }
                        });                                              
                    } 
                    
                    for (var i=0; i<type.length; i++) {                     
                        Object.entries(order1).forEach(
                        ([key, value]) => {      
                            if (value.building_type == type[i]) {
                                order2.push(value);                            
                            }
                        });                                              
                    }

                    return order2;
                }


                
            }



            function narrowByType() { 
                var typesChecked = whatTypes();
                var filtered1 = [];
                var twoTypes = [];
                var combined = [];
                var ce, ep, erel, cp, cres;


                for (var i=0; i<typesChecked.length; i++) {
                    if (typesChecked[i] == "educational") {
                        for (var j=0; j<typesChecked.length; j++) {
                            if (typesChecked[j] == "commercial") {
                                Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Edu and Comm/Ind") { twoTypes.push(value); } });
                                ce = true;        
                            }
                            if (typesChecked[j] == "public") {
                                Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Edu") { twoTypes.push(value); } });
                                ep = true;       
                            }
                            if (typesChecked[j] == "religious") {
                                Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Religious and Edu") { twoTypes.push(value); } });
                                erel = true;        
                            }
                        }
                    }
                    if (typesChecked[i] == "commercial") {
                        for (var j=0; j<typesChecked.length; j++) {
                            if (typesChecked[j] == "public") {
                                Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Comm/Ind") { twoTypes.push(value); } });
                                cp = true;       
                            }
                            if (typesChecked[j] == "residential") {
                                Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Comm/Ind and Residential") { twoTypes.push(value); } });
                                cres = true;                              
                            }
                        }
                    }               
                }


                for (var i=0; i<typesChecked.length; i++) {
                    if (typesChecked[i] == "residential") {
                        Object.entries(myArray).forEach(
                        ([key, value]) => {      
                            if (value.building_type == "Residential") {
                                filtered1.push(value);                            
                            }
                        });


                        if (cres != true) { 
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Comm/Ind and Residential") { filtered1.push(value); } });
                        }
                    }

                    if (typesChecked[i] == "public") {
                        Object.entries(myArray).forEach(
                        ([key, value]) => {      
                            if (value.building_type == "Public") {
                                filtered1.push(value);                           
                            }    
                        });


                        if (ep != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Edu") { filtered1.push(value); } });
                        }
                        if (cp != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Comm/Ind") { filtered1.push(value); } });
                        }
                    }

                    if (typesChecked[i] == "religious") {
                        Object.entries(myArray).forEach(
                        ([key, value]) => {      
                            if (value.building_type == "Religious") {
                                filtered1.push(value);                            
                            }
                        });


                        if (erel != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Religious and Edu") { filtered1.push(value); }});
                        }
                    }

                    if (typesChecked[i] == "educational") {
                        Object.entries(myArray).forEach(
                        ([key, value]) => {      
                            if (value.building_type == "Educational") {
                                filtered1.push(value);                            
                            }
                        });


                        if (ep != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Edu") { filtered1.push(value); } });
                        }
                        if (ce != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Edu and Comm/Ind") { filtered1.push(value); } });
                        }
                        if (erel != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Religious and Edu") { filtered1.push(value); } });
                        }
                    }

                    if (typesChecked[i] == "commercial") {
                        Object.entries(myArray).forEach(
                        ([key, value]) => {      
                            if (value.building_type == "Commercial/Industrial") {
                                filtered1.push(value);                            
                            }
                        });


                        if (cp != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Public and Comm/Ind") { filtered1.push(value); } });
                        }
                        if (ce != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Edu and Comm/Ind") { filtered1.push(value); } });
                        }
                        if (cres != true) {
                            Object.entries(myArray).forEach( ([key, value]) => { if (value.building_type == "Comm/Ind and Residential") { filtered1.push(value); } });
                        }
                    }               
                }
                
                if (typesChecked.length == 5) {
                    Object.entries(myArray).forEach(
                    ([key, value]) => {      
                        if (value.building_type == "") {
                            filtered1.push(value);                            
                        }
                    });
                }

                Object.entries(filtered1).forEach( ([key, value]) => { combined.push(value); });
                Object.entries(twoTypes).forEach( ([key, value]) => { combined.push(value); });
                return combined;
            }


            function whatTypes() {
                function removeOptions(selectbox) {
                    var i;
                    for(i = selectbox.options.length - 1 ; i >= 0 ; i--)
                    {
                        selectbox.remove(i);
                    }
                }
                
                removeOptions(document.getElementById("waypoints"));
                

                var typeCheckboxes = document.getElementsByName('typeBox');
                var typesChecked = [];              

                for (var i=0; i<typeCheckboxes.length; i++) {
                    if (typeCheckboxes[i].checked) {
                        typesChecked.push(typeCheckboxes[i].value);
                    }
                }

                return typesChecked;
            }

            function detectBrowser() {
                var useragent = navigator.userAgent;
                var mapdiv = document.getElementById("map");
                var paneldiv = document.getElementById("right-panel");
                var waypointsdiv = document.getElementById("waypoints");

                if (useragent.indexOf('iPhone') != -1 || useragent.indexOf('Android') != -1 ) {
                    mapdiv.style.width = '100%';
                    mapdiv.style.height = '100%';
                    paneldiv.style.width = '100%';
                    paneldiv.style.height = '100%';
                    paneldiv.style.margin = '2px';
                    waypointsdiv.style.height = '50px';
                    waypointsdiv.style.width = '95%';
                }   
            }

        </script>
        <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDM31peI5VTtUUY-w28K6hIXDy0QW2fRqA&callback=initMap">
        </script>
    </body>
</html>